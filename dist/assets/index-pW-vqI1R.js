var g=Object.defineProperty;var p=(n,e,t)=>e in n?g(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var s=(n,e,t)=>(p(n,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const l of a.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&r(l)}).observe(document,{childList:!0,subtree:!0});function t(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerPolicy&&(a.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?a.credentials="include":i.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function r(i){if(i.ep)return;i.ep=!0;const a=t(i);fetch(i.href,a)}})();class b{constructor(e,t){s(this,"x");s(this,"y");s(this,"parent",window.game.board);s(this,"element",document.createElement("div"));s(this,"elementChild",document.createElement("p"));s(this,"perimeterTilesCoordinates",[]);s(this,"neighborMineCount",0);s(this,"isRevealed",!1);s(this,"isFlagged",!1);s(this,"isMined",!1);this.x=e,this.y=t,this.element.classList.add("tile"),this.element.appendChild(this.elementChild)}init(){this.x%2===0?this.y%2===0?this.element.classList.add("color1"):this.element.classList.add("color2"):this.y%2===0?this.element.classList.add("color2"):this.element.classList.add("color1"),this.element.addEventListener("mouseup",e=>this.onClick(e)),this.element.addEventListener("dblclick",e=>this.onDoubleClick(e))}get perimeterTiles(){return this.perimeterTilesCoordinates.map(e=>this.parent.boardData.find(t=>t.x===e.x&&t.y===e.y)).filter(e=>e!==void 0)}_setPerimeterTilesCoordinates(){const e=[];e.push({x:this.x-1,y:this.y}),e.push({x:this.x-1,y:this.y+1}),e.push({x:this.x,y:this.y+1}),e.push({x:this.x+1,y:this.y+1}),e.push({x:this.x+1,y:this.y}),e.push({x:this.x+1,y:this.y-1}),e.push({x:this.x,y:this.y-1}),e.push({x:this.x-1,y:this.y-1}),this.perimeterTilesCoordinates=e.filter(t=>t.x>=0&&t.x<this.parent.size[0]&&t.y>=0&&t.y<this.parent.size[1])}_revealAdjacentTiles(e,t=!0){e.perimeterTiles.forEach(i=>{i.isMined||i.isRevealed||i.isFlagged||(i.isRevealed=!0,i.element.classList.add("revealed"),window.game.score.increment(),i.neighborMineCount===0&&t&&this._revealAdjacentTiles(i))})}_checkAdjacentTilesMinesOK(){if(this.neighborMineCount===0)return;const e=this.perimeterTiles,t=e.filter(r=>r.isFlagged);this.neighborMineCount===t.length&&e.forEach(r=>{if(r.isFlagged&&!r.isMined)return this.parent.revealBoardMines();this._revealAdjacentTiles(this)})}onClick(e){if(e.preventDefault(),!this.isRevealed){if(e.button===0){if(this.isRevealed=!0,this.isFlagged=!1,window.game.score.increment(),this.isMined)return this.parent.revealBoardMines();this.neighborMineCount===0&&this._revealAdjacentTiles(this),this.element.classList.add("revealed"),this.element.classList.remove("flagged")}e.button===2&&(this.isFlagged=!this.isFlagged,this.element.classList.toggle("flagged"))}}onDoubleClick(e){this._checkAdjacentTilesMinesOK()}}const u=document.querySelector("#counter"),L=document.querySelector("#timer");class v{constructor(){s(this,"element",document.querySelector("#board"));s(this,"size",[0,0]);s(this,"boardData",[]);s(this,"mineCount",0)}setup(e,t){this.element.classList.remove("disabled"),this.size=[e,t],this.boardData=[],this.mineCount=0,this.init()}init(){this.removeTiles(),this._drawBoard(),this._nbMines(),this._plantMines(),this.boardData.map(e=>e._setPerimeterTilesCoordinates()),this.empties.map(e=>{const t=e.perimeterTiles.filter(r=>r.isMined).length;e.neighborMineCount=t,t>0?e.elementChild.innerHTML=t.toString():e.element.removeChild(e.elementChild)}),L.classList.add("active"),u.classList.add("active")}reset(){this.size=[0,0],this.boardData=[],this.mineCount=0,this.removeTiles()}removeTiles(){for(;this.element.lastChild;)this.element.removeChild(this.element.lastChild);this.element.classList.remove("easy","normal","hard")}get flags(){return this.boardData.filter(e=>e.isFlagged)}get mines(){return this.boardData.filter(e=>e.isMined)}get empties(){return this.boardData.filter(e=>!e.isMined)}_drawBoard(){const[e,t]=this.size;for(let r=0;r<e;r++)for(let i=0;i<t;i++){const a=new b(r,i);a.init(),this.element.appendChild(a.element),this.boardData.push(a)}}_nbMines(){const[e,t]=this.size,r=e*t;this.mineCount=Math.floor(Math.random()*(r*.3-r*.1+1))+r*.1}_plantMines(){let e=0;for(let t=0;t<this.mineCount;t++){const r=Math.floor(Math.random()*1e3+1)%(this.size[0]*this.size[1]);this.boardData[r].isMined?e++:this.boardData[r].isMined=!0}this.mineCount-=e}revealBoardMines(){this.boardData.forEach(e=>{e.isMined&&e.element.classList.add("failure")}),window.game.gameover(),this.element.classList.add("disabled"),u.classList.add("failure")}}class y{constructor(){s(this,"element",document.querySelector("#timer"));s(this,"time",0);s(this,"timerID",0);s(this,"_stopped",!0)}get isStopped(){return this._stopped}get formatted(){return new Date(1e3*this.time).toISOString().slice(14,19)}start(){this.reset(),this.timerID=setInterval(()=>{this.time++,this.element.innerHTML=this.formatted},1e3),this._stopped=!1,this.element.classList.remove("stopped")}stop(){this.timerID>0&&clearInterval(this.timerID),this._stopped=!0,this.element.classList.add("stopped")}reset(){this.timerID>0&&clearInterval(this.timerID),this.time=0,this._stopped=!0,this.element.classList.remove("stopped"),this.element.classList.remove("success"),this.element.innerHTML=this.formatted}}const c=document.querySelector("#counter");class w{constructor(){s(this,"_score",0);s(this,"_message","");s(this,"toWin",0)}get score(){return this._score}set score(e){this._score=e}get message(){return this._message}set message(e){this._message=e}reset(){this.score=0,this.message=""}increment(){this.score+=1,c.innerHTML=this.score.toString(),this.score+window.game.board.mineCount===this.toWin&&(this.score=this.toWin,c.innerHTML=this.score.toString(),c.classList.add("success"),window.game.win())}}const d=document.querySelector("#btn-game-abort"),M=document.querySelector("#btn-game-new"),C=document.querySelector("#difficulties"),h=document.querySelector("#counter");class T{constructor(){s(this,"difficulty","easy");s(this,"state","new");s(this,"timer",new y);s(this,"board",new v);s(this,"score",new w);s(this,"firstClick",!1)}new(e){switch(this.state="new",this.firstClick=!1,this.timer.reset(),this.score.score=0,this.difficulty=e,this.difficulty){case"easy":this.board.setup(10,10),this.score.toWin=10**2;break;case"normal":this.board.setup(18,18),this.score.toWin=18**2;break;case"hard":this.board.setup(25,25),this.score.toWin=25**2;break}this.board.element.classList.add(this.difficulty),this.board.element.addEventListener("mousedown",t=>{this.onBoardClick()})}start(){this.state="ongoing",this.timer.start(),d.classList.remove("hidden")}win(){this.board.boardData.forEach(e=>{e.isMined&&e.element.classList.add("success")}),this.board.element.classList.add("disabled"),this.timer.element.classList.add("success"),this.state="won",this.timer.stop(),d.classList.add("hidden")}gameover(){this.board.boardData.forEach(e=>{e.isMined&&e.element.classList.add("failure")}),this.board.element.classList.add("disabled"),this.timer.element.classList.add("failure"),this.state="gameover",this.timer.stop(),d.classList.add("hidden")}reset(){this.state="new",this.score.reset(),this.timer.reset(),this.board.reset(),h.innerHTML=this.score.score.toString(),h.classList.remove("success"),h.classList.remove("failure")}get isStarted(){return this.state=="ongoing"}get isGameOver(){return this.state=="gameover"}onBoardClick(){this.firstClick||(this.firstClick=!0,this.start()),C.classList.remove("active"),M.classList.remove("active")}}const x=document.querySelector("#game-menu"),m=document.querySelector("#btn-game-new"),S=document.querySelector("#btn-game-abort"),f=document.querySelector("#difficulties"),_=document.querySelectorAll("#difficulties button"),D=document.querySelector("#counter"),o=new T;window.game=o;window.addEventListener("load",()=>{m.addEventListener("click",()=>{m.classList.toggle("active"),f.classList.toggle("active")}),window.addEventListener("contextmenu",n=>{n.preventDefault()}),S.addEventListener("click",()=>{o.isStarted&&(o.gameover(),o.board.element.classList.add("disabled"),D.classList.add("failure"))}),_.forEach(n=>{n.addEventListener("click",()=>{o&&o.reset(),x.classList.remove("no-current-game"),m.classList.toggle("active"),f.classList.toggle("active");const t=n.getAttribute("id").split("-")[2];o.new(t)})})});
